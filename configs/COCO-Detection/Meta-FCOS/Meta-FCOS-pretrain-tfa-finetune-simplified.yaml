# Benchmarking TFA simplified version, which is only possible on FCOS, finetune on all classes with novel categories

# First, it only finetunes on novel classes. Second, it only retrain the classifier head. (This will be a better comparison)
# Includes different setup:
# (1) finetune both cls and box head
# (2) finetune only box head

# in terms of if copy base class codes or not

_BASE_: "Base-FCOS.yaml"
MODEL:
  META_ARCHITECTURE: "MetaOneStageDetector"
  WEIGHTS: "manifold://fai4ar/tree/liyin/few-shot/meta-fcos/test/20211103170535/e2e_train/model_final.pth" # default
  DDP_FIND_UNUSED_PARAMETERS: True
  # Step 1: freeze backbone
  BACKBONE:
    NAME: "build_fcos_resnet_fpn_backbone"
    FREEZE: True # freeze backbone
  FPN:
    IN_FEATURES: ["res3", "res4", "res5"]
  # Step 2: freeze box branch and cls_tower
  PROPOSAL_GENERATOR:
    NAME: "MetaFCOS"
    # freeze by components
    FREEZE_CLS_TOWER: True
    # bbox tower and branch
    FREEZE_BBOX_BRANCH: True
    # FREEZE_BBOX_TOWER: True
  META_LEARN:
    EPISODIC_LEARNING: False # pretraining
  # Step 3: not copy base class codes
  TFA:
    FINETINE: True # indicates training stage, not used for now, as finetune in coco_pretrain_finetune_all indicates this stage
    TRAIN_SHOT: 10
    USE_PRETRAINED_BASE_CLS_LOGITS: True
  # Step 4: only use novel set
  FCOS:
    NUM_CLASSES: 20 #80
  # PIXEL_MEAN: [102.9801, 115.9465, 122.7717]
DATASETS:
  TRAIN: ("coco_pretrain_finetune_novel",)
  TEST: ("coco_pretrain_val_all", )
  BASE_CLASSES_SPLIT: "coco_pretrain_val_base"
  NOVEL_CLASSES_SPLIT: "coco_pretrain_val_novel"
SOLVER:
  IMS_PER_BATCH: 16
  BASE_LR: 0.001  # 1/10 of the initial learning rate
  STEPS: (20000, 26000)
  MAX_ITER: 30000
  REFERENCE_WORLD_SIZE: 8 #64
  CHECKPOINT_PERIOD: 10000
  # LR_MULTIPLIER_OVERWRITE, [{'backbone': 0.1}, {'reference_points': 0.1, 'sampling_offsets': 0.1}]
INPUT:
  MIN_SIZE_TRAIN: (640, 672, 704, 736, 768, 800)
TEST:
  EVAL_PERIOD: 10000

# D2GO_DATA:
#   AUG_OPS:
#     TRAIN: [
#       'ResizeScaleOp::{"min_scale": 0.1, "max_scale": 2.0, "target_height": 1024, "target_width": 1024}',
#       "RandomFlipOp",
#       'FixedSizeCropOp::{"crop_size": [1024, 1024]}',
#       'RandAugmentOp::{"magnitude":9.0, "magnitude_std":0.5, "increasing":1}',
#     ]
#     TEST: ["ResizeShortestEdgeOp"]
